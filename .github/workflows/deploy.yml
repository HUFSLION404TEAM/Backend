name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: create application.yml file
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_YML }}" >> src/main/resources/application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/unibiz .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/unibiz

  deploy-with-docker-compose:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - name: stop existing nginx service
        run: |
          sudo systemctl stop nginx || echo "nginx already stopped"
          sudo systemctl disable nginx || echo "nginx already disabled"

      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/unibiz

      - name: stop existing containers
        run: |
          sudo docker compose down --volumes || true

      - name: create ssl directory
        run: |
          mkdir -p ssl
          sudo chmod 755 ssl

      - name: run docker-compose with nginx and ssl
        run: |
          sudo docker compose up -d mysql app nginx

      - name: wait for services to start
        run: sleep 30

      - name: setup ssl certificate
        run: |
          sudo docker compose run --rm --entrypoint="" certbot sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot --email ${{ secrets.SSL_EMAIL }} --agree-tos --no-eff-email -d unibiz.lion.it.kr || echo 'SSL setup failed, continuing...'"

      - name: restart services with ssl
        run: |
          sudo docker compose down
          sudo docker compose up -d

      - name: delete old docker images
        run: sudo docker system prune -f

      - name: verify deployment
        run: |
          echo "=== Deployment Status ==="
          sudo docker compose ps
          echo "=== Service Logs ==="
          sudo docker compose logs --tail=50