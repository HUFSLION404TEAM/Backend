name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # application.yml 및 profile yml 파일 생성
      - name: create application.yml files
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
          echo "${{ secrets.JWT_YML }}" > ./src/main/resources/application-jwt.yml
          echo "${{ secrets.MYSQL_YML }}" > ./src/main/resources/application-mysql.yml
          echo "${{ secrets.OAUTH2_YML }}" > ./src/main/resources/application-oauth2.yml
          echo "${{ secrets.SWAGGER_YML }}" > ./src/main/resources/application-swagger.yml

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/unibiz .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/unibiz

  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/unibiz

      - name: docker stop container
        run: |
          if [ $(sudo docker ps -q -f name=unibiz) ]; then
            sudo docker stop unibiz
          fi

      - name: docker run new container
        run: sudo docker run --name unibiz --rm -d -p 8090:8080 ${{ secrets.DOCKERHUB_USERNAME }}/unibiz

      - name: delete old docker image
        run: sudo docker system prune -f